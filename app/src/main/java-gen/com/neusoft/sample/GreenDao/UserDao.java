package com.neusoft.sample.GreenDao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.neusoft.sample.GreenDao.User;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER".
*/
public class UserDao extends AbstractDao<User, Long> {

    public static final String TABLENAME = "USER";

    /**
     * Properties of entity User.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Phone = new Property(1, String.class, "phone", false, "PHONE");
        public final static Property Psword = new Property(2, String.class, "psword", false, "PSWORD");
        public final static Property Role = new Property(3, String.class, "role", false, "ROLE");
        public final static Property Server_id = new Property(4, String.class, "server_id", false, "SERVER_ID");
        public final static Property Province = new Property(5, String.class, "province", false, "PROVINCE");
        public final static Property Province_nub = new Property(6, String.class, "province_nub", false, "PROVINCE_NUB");
        public final static Property City = new Property(7, String.class, "city", false, "CITY");
        public final static Property City_nub = new Property(8, String.class, "city_nub", false, "CITY_NUB");
        public final static Property Region = new Property(9, String.class, "region", false, "REGION");
        public final static Property Region_nub = new Property(10, String.class, "region_nub", false, "REGION_NUB");
        public final static Property School = new Property(11, String.class, "school", false, "SCHOOL");
        public final static Property School_nub = new Property(12, String.class, "school_nub", false, "SCHOOL_NUB");
        public final static Property Grade = new Property(13, String.class, "grade", false, "GRADE");
        public final static Property Grade_nub = new Property(14, String.class, "grade_nub", false, "GRADE_NUB");
        public final static Property Classes = new Property(15, String.class, "classes", false, "CLASSES");
        public final static Property Classes_nub = new Property(16, String.class, "classes_nub", false, "CLASSES_NUB");
        public final static Property ProductNo = new Property(17, String.class, "productNo", false, "PRODUCT_NO");
        public final static Property User_icon_url = new Property(18, String.class, "user_icon_url", false, "USER_ICON_URL");
        public final static Property Gender = new Property(19, String.class, "gender", false, "GENDER");
        public final static Property Qq_Number = new Property(20, String.class, "qq_Number", false, "QQ__NUMBER");
        public final static Property Weixin_number = new Property(21, String.class, "Weixin_number", false, "WEIXIN_NUMBER");
        public final static Property Motto = new Property(22, String.class, "Motto", false, "MOTTO");
        public final static Property Recipient = new Property(23, String.class, "Recipient", false, "RECIPIENT");
        public final static Property Address = new Property(24, String.class, "Address", false, "ADDRESS");
        public final static Property Zip_code = new Property(25, String.class, "Zip_code", false, "ZIP_CODE");
        public final static Property Email = new Property(26, String.class, "email", false, "EMAIL");
        public final static Property Mobile = new Property(27, String.class, "mobile", false, "MOBILE");
    };


    public UserDao(DaoConfig config) {
        super(config);
    }
    
    public UserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"PHONE\" TEXT NOT NULL UNIQUE ," + // 1: phone
                "\"PSWORD\" TEXT NOT NULL ," + // 2: psword
                "\"ROLE\" TEXT NOT NULL ," + // 3: role
                "\"SERVER_ID\" TEXT," + // 4: server_id
                "\"PROVINCE\" TEXT," + // 5: province
                "\"PROVINCE_NUB\" TEXT," + // 6: province_nub
                "\"CITY\" TEXT," + // 7: city
                "\"CITY_NUB\" TEXT," + // 8: city_nub
                "\"REGION\" TEXT," + // 9: region
                "\"REGION_NUB\" TEXT," + // 10: region_nub
                "\"SCHOOL\" TEXT," + // 11: school
                "\"SCHOOL_NUB\" TEXT," + // 12: school_nub
                "\"GRADE\" TEXT," + // 13: grade
                "\"GRADE_NUB\" TEXT," + // 14: grade_nub
                "\"CLASSES\" TEXT," + // 15: classes
                "\"CLASSES_NUB\" TEXT," + // 16: classes_nub
                "\"PRODUCT_NO\" TEXT," + // 17: productNo
                "\"USER_ICON_URL\" TEXT," + // 18: user_icon_url
                "\"GENDER\" TEXT," + // 19: gender
                "\"QQ__NUMBER\" TEXT," + // 20: qq_Number
                "\"WEIXIN_NUMBER\" TEXT," + // 21: Weixin_number
                "\"MOTTO\" TEXT," + // 22: Motto
                "\"RECIPIENT\" TEXT," + // 23: Recipient
                "\"ADDRESS\" TEXT," + // 24: Address
                "\"ZIP_CODE\" TEXT," + // 25: Zip_code
                "\"EMAIL\" TEXT," + // 26: email
                "\"MOBILE\" TEXT);"); // 27: mobile
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, User entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getPhone());
        stmt.bindString(3, entity.getPsword());
        stmt.bindString(4, entity.getRole());
 
        String server_id = entity.getServer_id();
        if (server_id != null) {
            stmt.bindString(5, server_id);
        }
 
        String province = entity.getProvince();
        if (province != null) {
            stmt.bindString(6, province);
        }
 
        String province_nub = entity.getProvince_nub();
        if (province_nub != null) {
            stmt.bindString(7, province_nub);
        }
 
        String city = entity.getCity();
        if (city != null) {
            stmt.bindString(8, city);
        }
 
        String city_nub = entity.getCity_nub();
        if (city_nub != null) {
            stmt.bindString(9, city_nub);
        }
 
        String region = entity.getRegion();
        if (region != null) {
            stmt.bindString(10, region);
        }
 
        String region_nub = entity.getRegion_nub();
        if (region_nub != null) {
            stmt.bindString(11, region_nub);
        }
 
        String school = entity.getSchool();
        if (school != null) {
            stmt.bindString(12, school);
        }
 
        String school_nub = entity.getSchool_nub();
        if (school_nub != null) {
            stmt.bindString(13, school_nub);
        }
 
        String grade = entity.getGrade();
        if (grade != null) {
            stmt.bindString(14, grade);
        }
 
        String grade_nub = entity.getGrade_nub();
        if (grade_nub != null) {
            stmt.bindString(15, grade_nub);
        }
 
        String classes = entity.getClasses();
        if (classes != null) {
            stmt.bindString(16, classes);
        }
 
        String classes_nub = entity.getClasses_nub();
        if (classes_nub != null) {
            stmt.bindString(17, classes_nub);
        }
 
        String productNo = entity.getProductNo();
        if (productNo != null) {
            stmt.bindString(18, productNo);
        }
 
        String user_icon_url = entity.getUser_icon_url();
        if (user_icon_url != null) {
            stmt.bindString(19, user_icon_url);
        }
 
        String gender = entity.getGender();
        if (gender != null) {
            stmt.bindString(20, gender);
        }
 
        String qq_Number = entity.getQq_Number();
        if (qq_Number != null) {
            stmt.bindString(21, qq_Number);
        }
 
        String Weixin_number = entity.getWeixin_number();
        if (Weixin_number != null) {
            stmt.bindString(22, Weixin_number);
        }
 
        String Motto = entity.getMotto();
        if (Motto != null) {
            stmt.bindString(23, Motto);
        }
 
        String Recipient = entity.getRecipient();
        if (Recipient != null) {
            stmt.bindString(24, Recipient);
        }
 
        String Address = entity.getAddress();
        if (Address != null) {
            stmt.bindString(25, Address);
        }
 
        String Zip_code = entity.getZip_code();
        if (Zip_code != null) {
            stmt.bindString(26, Zip_code);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(27, email);
        }
 
        String mobile = entity.getMobile();
        if (mobile != null) {
            stmt.bindString(28, mobile);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public User readEntity(Cursor cursor, int offset) {
        User entity = new User( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // phone
            cursor.getString(offset + 2), // psword
            cursor.getString(offset + 3), // role
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // server_id
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // province
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // province_nub
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // city
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // city_nub
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // region
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // region_nub
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // school
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // school_nub
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // grade
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // grade_nub
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // classes
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // classes_nub
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // productNo
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // user_icon_url
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // gender
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // qq_Number
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // Weixin_number
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // Motto
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // Recipient
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // Address
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25), // Zip_code
            cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26), // email
            cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27) // mobile
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, User entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPhone(cursor.getString(offset + 1));
        entity.setPsword(cursor.getString(offset + 2));
        entity.setRole(cursor.getString(offset + 3));
        entity.setServer_id(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setProvince(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setProvince_nub(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setCity(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setCity_nub(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setRegion(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setRegion_nub(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setSchool(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setSchool_nub(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setGrade(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setGrade_nub(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setClasses(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setClasses_nub(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setProductNo(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setUser_icon_url(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setGender(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setQq_Number(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setWeixin_number(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setMotto(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setRecipient(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setAddress(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
        entity.setZip_code(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
        entity.setEmail(cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26));
        entity.setMobile(cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(User entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(User entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
