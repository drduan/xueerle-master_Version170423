package com.neusoft.sample.GreenDao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.neusoft.sample.GreenDao.UserDoSubjectInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER_DO_SUBJECT_INFO".
*/
public class UserDoSubjectInfoDao extends AbstractDao<UserDoSubjectInfo, Long> {

    public static final String TABLENAME = "USER_DO_SUBJECT_INFO";

    /**
     * Properties of entity UserDoSubjectInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Test_group_number = new Property(1, String.class, "test_group_number", false, "TEST_GROUP_NUMBER");
        public final static Property User_id = new Property(2, String.class, "user_id", false, "USER_ID");
        public final static Property Time = new Property(3, Integer.class, "time", false, "TIME");
        public final static Property Testtime = new Property(4, java.util.Date.class, "testtime", false, "TESTTIME");
        public final static Property Xtdctm_id = new Property(5, String.class, "xtdctm_id", false, "XTDCTM_ID");
        public final static Property Examination_number = new Property(6, String.class, "examination_number", false, "EXAMINATION_NUMBER");
        public final static Property Ismastered = new Property(7, Integer.class, "ismastered", false, "ISMASTERED");
        public final static Property Xtcsjg_id = new Property(8, Integer.class, "xtcsjg_id", false, "XTCSJG_ID");
        public final static Property Score = new Property(9, Integer.class, "score", false, "SCORE");
        public final static Property Number_error = new Property(10, Integer.class, "number_error", false, "NUMBER_ERROR");
        public final static Property Number_success = new Property(11, Integer.class, "number_success", false, "NUMBER_SUCCESS");
        public final static Property Duration = new Property(12, Integer.class, "duration", false, "DURATION");
        public final static Property Jg_datetime = new Property(13, java.util.Date.class, "jg_datetime", false, "JG_DATETIME");
        public final static Property Xtcsjl_id = new Property(14, Integer.class, "xtcsjl_id", false, "XTCSJL_ID");
        public final static Property Answer = new Property(15, String.class, "answer", false, "ANSWER");
        public final static Property Jl_datetime = new Property(16, java.util.Date.class, "jl_datetime", false, "JL_DATETIME");
        public final static Property TableName = new Property(17, String.class, "tableName", false, "TABLE_NAME");
    };


    public UserDoSubjectInfoDao(DaoConfig config) {
        super(config);
    }
    
    public UserDoSubjectInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER_DO_SUBJECT_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"TEST_GROUP_NUMBER\" TEXT," + // 1: test_group_number
                "\"USER_ID\" TEXT," + // 2: user_id
                "\"TIME\" INTEGER," + // 3: time
                "\"TESTTIME\" INTEGER," + // 4: testtime
                "\"XTDCTM_ID\" TEXT," + // 5: xtdctm_id
                "\"EXAMINATION_NUMBER\" TEXT," + // 6: examination_number
                "\"ISMASTERED\" INTEGER," + // 7: ismastered
                "\"XTCSJG_ID\" INTEGER," + // 8: xtcsjg_id
                "\"SCORE\" INTEGER," + // 9: score
                "\"NUMBER_ERROR\" INTEGER," + // 10: number_error
                "\"NUMBER_SUCCESS\" INTEGER," + // 11: number_success
                "\"DURATION\" INTEGER," + // 12: duration
                "\"JG_DATETIME\" INTEGER," + // 13: jg_datetime
                "\"XTCSJL_ID\" INTEGER," + // 14: xtcsjl_id
                "\"ANSWER\" TEXT," + // 15: answer
                "\"JL_DATETIME\" INTEGER," + // 16: jl_datetime
                "\"TABLE_NAME\" TEXT);"); // 17: tableName
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER_DO_SUBJECT_INFO\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, UserDoSubjectInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String test_group_number = entity.getTest_group_number();
        if (test_group_number != null) {
            stmt.bindString(2, test_group_number);
        }
 
        String user_id = entity.getUser_id();
        if (user_id != null) {
            stmt.bindString(3, user_id);
        }
 
        Integer time = entity.getTime();
        if (time != null) {
            stmt.bindLong(4, time);
        }
 
        java.util.Date testtime = entity.getTesttime();
        if (testtime != null) {
            stmt.bindLong(5, testtime.getTime());
        }
 
        String xtdctm_id = entity.getXtdctm_id();
        if (xtdctm_id != null) {
            stmt.bindString(6, xtdctm_id);
        }
 
        String examination_number = entity.getExamination_number();
        if (examination_number != null) {
            stmt.bindString(7, examination_number);
        }
 
        Integer ismastered = entity.getIsmastered();
        if (ismastered != null) {
            stmt.bindLong(8, ismastered);
        }
 
        Integer xtcsjg_id = entity.getXtcsjg_id();
        if (xtcsjg_id != null) {
            stmt.bindLong(9, xtcsjg_id);
        }
 
        Integer score = entity.getScore();
        if (score != null) {
            stmt.bindLong(10, score);
        }
 
        Integer number_error = entity.getNumber_error();
        if (number_error != null) {
            stmt.bindLong(11, number_error);
        }
 
        Integer number_success = entity.getNumber_success();
        if (number_success != null) {
            stmt.bindLong(12, number_success);
        }
 
        Integer duration = entity.getDuration();
        if (duration != null) {
            stmt.bindLong(13, duration);
        }
 
        java.util.Date jg_datetime = entity.getJg_datetime();
        if (jg_datetime != null) {
            stmt.bindLong(14, jg_datetime.getTime());
        }
 
        Integer xtcsjl_id = entity.getXtcsjl_id();
        if (xtcsjl_id != null) {
            stmt.bindLong(15, xtcsjl_id);
        }
 
        String answer = entity.getAnswer();
        if (answer != null) {
            stmt.bindString(16, answer);
        }
 
        java.util.Date jl_datetime = entity.getJl_datetime();
        if (jl_datetime != null) {
            stmt.bindLong(17, jl_datetime.getTime());
        }
 
        String tableName = entity.getTableName();
        if (tableName != null) {
            stmt.bindString(18, tableName);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public UserDoSubjectInfo readEntity(Cursor cursor, int offset) {
        UserDoSubjectInfo entity = new UserDoSubjectInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // test_group_number
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // user_id
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // time
            cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)), // testtime
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // xtdctm_id
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // examination_number
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // ismastered
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // xtcsjg_id
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // score
            cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10), // number_error
            cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11), // number_success
            cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12), // duration
            cursor.isNull(offset + 13) ? null : new java.util.Date(cursor.getLong(offset + 13)), // jg_datetime
            cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14), // xtcsjl_id
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // answer
            cursor.isNull(offset + 16) ? null : new java.util.Date(cursor.getLong(offset + 16)), // jl_datetime
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17) // tableName
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, UserDoSubjectInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTest_group_number(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUser_id(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTime(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setTesttime(cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)));
        entity.setXtdctm_id(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setExamination_number(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setIsmastered(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setXtcsjg_id(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setScore(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setNumber_error(cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10));
        entity.setNumber_success(cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11));
        entity.setDuration(cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12));
        entity.setJg_datetime(cursor.isNull(offset + 13) ? null : new java.util.Date(cursor.getLong(offset + 13)));
        entity.setXtcsjl_id(cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14));
        entity.setAnswer(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setJl_datetime(cursor.isNull(offset + 16) ? null : new java.util.Date(cursor.getLong(offset + 16)));
        entity.setTableName(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(UserDoSubjectInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(UserDoSubjectInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
