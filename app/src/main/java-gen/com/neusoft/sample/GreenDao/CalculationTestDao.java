package com.neusoft.sample.GreenDao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.neusoft.sample.GreenDao.CalculationTest;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CALCULATION_TEST".
*/
public class CalculationTestDao extends AbstractDao<CalculationTest, Long> {

    public static final String TABLENAME = "CALCULATION_TEST";

    /**
     * Properties of entity CalculationTest.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ItemNo = new Property(1, String.class, "itemNo", false, "ITEM_NO");
        public final static Property Stem = new Property(2, String.class, "stem", false, "STEM");
        public final static Property HasStemPic = new Property(3, Boolean.class, "hasStemPic", false, "HAS_STEM_PIC");
        public final static Property PicName = new Property(4, String.class, "picName", false, "PIC_NAME");
        public final static Property HasStemSound = new Property(5, Boolean.class, "hasStemSound", false, "HAS_STEM_SOUND");
        public final static Property SoundName = new Property(6, String.class, "soundName", false, "SOUND_NAME");
        public final static Property ChoiceA = new Property(7, String.class, "choiceA", false, "CHOICE_A");
        public final static Property ChoiceB = new Property(8, String.class, "choiceB", false, "CHOICE_B");
        public final static Property ChoiceC = new Property(9, String.class, "choiceC", false, "CHOICE_C");
        public final static Property ChoiceD = new Property(10, String.class, "choiceD", false, "CHOICE_D");
        public final static Property RightAnswer = new Property(11, String.class, "rightAnswer", false, "RIGHT_ANSWER");
    };


    public CalculationTestDao(DaoConfig config) {
        super(config);
    }
    
    public CalculationTestDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CALCULATION_TEST\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"ITEM_NO\" TEXT NOT NULL UNIQUE ," + // 1: itemNo
                "\"STEM\" TEXT," + // 2: stem
                "\"HAS_STEM_PIC\" INTEGER," + // 3: hasStemPic
                "\"PIC_NAME\" TEXT," + // 4: picName
                "\"HAS_STEM_SOUND\" INTEGER," + // 5: hasStemSound
                "\"SOUND_NAME\" TEXT," + // 6: soundName
                "\"CHOICE_A\" TEXT," + // 7: choiceA
                "\"CHOICE_B\" TEXT," + // 8: choiceB
                "\"CHOICE_C\" TEXT," + // 9: choiceC
                "\"CHOICE_D\" TEXT," + // 10: choiceD
                "\"RIGHT_ANSWER\" TEXT);"); // 11: rightAnswer
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CALCULATION_TEST\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, CalculationTest entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getItemNo());
 
        String stem = entity.getStem();
        if (stem != null) {
            stmt.bindString(3, stem);
        }
 
        Boolean hasStemPic = entity.getHasStemPic();
        if (hasStemPic != null) {
            stmt.bindLong(4, hasStemPic ? 1L: 0L);
        }
 
        String picName = entity.getPicName();
        if (picName != null) {
            stmt.bindString(5, picName);
        }
 
        Boolean hasStemSound = entity.getHasStemSound();
        if (hasStemSound != null) {
            stmt.bindLong(6, hasStemSound ? 1L: 0L);
        }
 
        String soundName = entity.getSoundName();
        if (soundName != null) {
            stmt.bindString(7, soundName);
        }
 
        String choiceA = entity.getChoiceA();
        if (choiceA != null) {
            stmt.bindString(8, choiceA);
        }
 
        String choiceB = entity.getChoiceB();
        if (choiceB != null) {
            stmt.bindString(9, choiceB);
        }
 
        String choiceC = entity.getChoiceC();
        if (choiceC != null) {
            stmt.bindString(10, choiceC);
        }
 
        String choiceD = entity.getChoiceD();
        if (choiceD != null) {
            stmt.bindString(11, choiceD);
        }
 
        String rightAnswer = entity.getRightAnswer();
        if (rightAnswer != null) {
            stmt.bindString(12, rightAnswer);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public CalculationTest readEntity(Cursor cursor, int offset) {
        CalculationTest entity = new CalculationTest( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // itemNo
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // stem
            cursor.isNull(offset + 3) ? null : cursor.getShort(offset + 3) != 0, // hasStemPic
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // picName
            cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0, // hasStemSound
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // soundName
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // choiceA
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // choiceB
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // choiceC
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // choiceD
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11) // rightAnswer
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, CalculationTest entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setItemNo(cursor.getString(offset + 1));
        entity.setStem(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setHasStemPic(cursor.isNull(offset + 3) ? null : cursor.getShort(offset + 3) != 0);
        entity.setPicName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setHasStemSound(cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0);
        entity.setSoundName(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setChoiceA(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setChoiceB(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setChoiceC(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setChoiceD(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setRightAnswer(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(CalculationTest entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(CalculationTest entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
