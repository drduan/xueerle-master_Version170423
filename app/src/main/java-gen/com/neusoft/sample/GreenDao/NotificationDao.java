package com.neusoft.sample.GreenDao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.neusoft.sample.GreenDao.Notification;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "NOTIFICATION".
*/
public class NotificationDao extends AbstractDao<Notification, Long> {

    public static final String TABLENAME = "NOTIFICATION";

    /**
     * Properties of entity Notification.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Notification_id = new Property(1, String.class, "notification_id", false, "NOTIFICATION_ID");
        public final static Property TitleNo = new Property(2, String.class, "titleNo", false, "TITLE_NO");
        public final static Property Title = new Property(3, String.class, "title", false, "TITLE");
        public final static Property Content = new Property(4, String.class, "content", false, "CONTENT");
        public final static Property Notify_publisher = new Property(5, String.class, "notify_publisher", false, "NOTIFY_PUBLISHER");
        public final static Property Notify_time = new Property(6, java.util.Date.class, "notify_time", false, "NOTIFY_TIME");
        public final static Property Notify_check_id = new Property(7, String.class, "notify_check_id", false, "NOTIFY_CHECK_ID");
        public final static Property Is_read = new Property(8, String.class, "is_read", false, "IS_READ");
        public final static Property Unique_id = new Property(9, String.class, "unique_id", false, "UNIQUE_ID");
    };


    public NotificationDao(DaoConfig config) {
        super(config);
    }
    
    public NotificationDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"NOTIFICATION\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"NOTIFICATION_ID\" TEXT NOT NULL ," + // 1: notification_id
                "\"TITLE_NO\" TEXT," + // 2: titleNo
                "\"TITLE\" TEXT," + // 3: title
                "\"CONTENT\" TEXT," + // 4: content
                "\"NOTIFY_PUBLISHER\" TEXT," + // 5: notify_publisher
                "\"NOTIFY_TIME\" INTEGER," + // 6: notify_time
                "\"NOTIFY_CHECK_ID\" TEXT," + // 7: notify_check_id
                "\"IS_READ\" TEXT," + // 8: is_read
                "\"UNIQUE_ID\" TEXT NOT NULL UNIQUE );"); // 9: unique_id
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"NOTIFICATION\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Notification entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getNotification_id());
 
        String titleNo = entity.getTitleNo();
        if (titleNo != null) {
            stmt.bindString(3, titleNo);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(4, title);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(5, content);
        }
 
        String notify_publisher = entity.getNotify_publisher();
        if (notify_publisher != null) {
            stmt.bindString(6, notify_publisher);
        }
 
        java.util.Date notify_time = entity.getNotify_time();
        if (notify_time != null) {
            stmt.bindLong(7, notify_time.getTime());
        }
 
        String notify_check_id = entity.getNotify_check_id();
        if (notify_check_id != null) {
            stmt.bindString(8, notify_check_id);
        }
 
        String is_read = entity.getIs_read();
        if (is_read != null) {
            stmt.bindString(9, is_read);
        }
        stmt.bindString(10, entity.getUnique_id());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Notification readEntity(Cursor cursor, int offset) {
        Notification entity = new Notification( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // notification_id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // titleNo
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // title
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // content
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // notify_publisher
            cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)), // notify_time
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // notify_check_id
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // is_read
            cursor.getString(offset + 9) // unique_id
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Notification entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setNotification_id(cursor.getString(offset + 1));
        entity.setTitleNo(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTitle(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setContent(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setNotify_publisher(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setNotify_time(cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)));
        entity.setNotify_check_id(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setIs_read(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setUnique_id(cursor.getString(offset + 9));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Notification entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Notification entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
