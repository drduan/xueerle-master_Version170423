package com.neusoft.sample.GreenDao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.neusoft.sample.GreenDao.TextTwoStructure;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TEXT_TWO_STRUCTURE".
*/
public class TextTwoStructureDao extends AbstractDao<TextTwoStructure, Long> {

    public static final String TABLENAME = "TEXT_TWO_STRUCTURE";

    /**
     * Properties of entity TextTwoStructure.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property SectionNo = new Property(1, String.class, "sectionNo", false, "SECTION_NO");
        public final static Property ShowSequence = new Property(2, Integer.class, "showSequence", false, "SHOW_SEQUENCE");
        public final static Property SectionSequence = new Property(3, Integer.class, "sectionSequence", false, "SECTION_SEQUENCE");
        public final static Property SectionSequenceName = new Property(4, String.class, "sectionSequenceName", false, "SECTION_SEQUENCE_NAME");
        public final static Property SectionName = new Property(5, String.class, "sectionName", false, "SECTION_NAME");
        public final static Property HasResource = new Property(6, Boolean.class, "hasResource", false, "HAS_RESOURCE");
        public final static Property Free = new Property(7, Boolean.class, "Free", false, "FREE");
        public final static Property ChapterNo = new Property(8, String.class, "chapterNo", false, "CHAPTER_NO");
        public final static Property KpNo = new Property(9, String.class, "kpNo", false, "KP_NO");
    };


    public TextTwoStructureDao(DaoConfig config) {
        super(config);
    }
    
    public TextTwoStructureDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TEXT_TWO_STRUCTURE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"SECTION_NO\" TEXT NOT NULL UNIQUE ," + // 1: sectionNo
                "\"SHOW_SEQUENCE\" INTEGER," + // 2: showSequence
                "\"SECTION_SEQUENCE\" INTEGER," + // 3: sectionSequence
                "\"SECTION_SEQUENCE_NAME\" TEXT," + // 4: sectionSequenceName
                "\"SECTION_NAME\" TEXT," + // 5: sectionName
                "\"HAS_RESOURCE\" INTEGER," + // 6: hasResource
                "\"FREE\" INTEGER," + // 7: Free
                "\"CHAPTER_NO\" TEXT," + // 8: chapterNo
                "\"KP_NO\" TEXT);"); // 9: kpNo
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TEXT_TWO_STRUCTURE\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, TextTwoStructure entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getSectionNo());
 
        Integer showSequence = entity.getShowSequence();
        if (showSequence != null) {
            stmt.bindLong(3, showSequence);
        }
 
        Integer sectionSequence = entity.getSectionSequence();
        if (sectionSequence != null) {
            stmt.bindLong(4, sectionSequence);
        }
 
        String sectionSequenceName = entity.getSectionSequenceName();
        if (sectionSequenceName != null) {
            stmt.bindString(5, sectionSequenceName);
        }
 
        String sectionName = entity.getSectionName();
        if (sectionName != null) {
            stmt.bindString(6, sectionName);
        }
 
        Boolean hasResource = entity.getHasResource();
        if (hasResource != null) {
            stmt.bindLong(7, hasResource ? 1L: 0L);
        }
 
        Boolean Free = entity.getFree();
        if (Free != null) {
            stmt.bindLong(8, Free ? 1L: 0L);
        }
 
        String chapterNo = entity.getChapterNo();
        if (chapterNo != null) {
            stmt.bindString(9, chapterNo);
        }
 
        String kpNo = entity.getKpNo();
        if (kpNo != null) {
            stmt.bindString(10, kpNo);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public TextTwoStructure readEntity(Cursor cursor, int offset) {
        TextTwoStructure entity = new TextTwoStructure( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // sectionNo
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // showSequence
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // sectionSequence
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // sectionSequenceName
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // sectionName
            cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0, // hasResource
            cursor.isNull(offset + 7) ? null : cursor.getShort(offset + 7) != 0, // Free
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // chapterNo
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // kpNo
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, TextTwoStructure entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setSectionNo(cursor.getString(offset + 1));
        entity.setShowSequence(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setSectionSequence(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setSectionSequenceName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setSectionName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setHasResource(cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0);
        entity.setFree(cursor.isNull(offset + 7) ? null : cursor.getShort(offset + 7) != 0);
        entity.setChapterNo(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setKpNo(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(TextTwoStructure entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(TextTwoStructure entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
