package com.neusoft.sample.GreenDao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.neusoft.sample.GreenDao.StudyGoodItem;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "STUDY_GOOD_ITEM".
*/
public class StudyGoodItemDao extends AbstractDao<StudyGoodItem, Long> {

    public static final String TABLENAME = "STUDY_GOOD_ITEM";

    /**
     * Properties of entity StudyGoodItem.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ProductItemNo = new Property(1, String.class, "productItemNo", false, "PRODUCT_ITEM_NO");
        public final static Property BookNo = new Property(2, String.class, "bookNo", false, "BOOK_NO");
        public final static Property Name = new Property(3, String.class, "name", false, "NAME");
        public final static Property ProductId = new Property(4, String.class, "productId", false, "PRODUCT_ID");
    };


    public StudyGoodItemDao(DaoConfig config) {
        super(config);
    }
    
    public StudyGoodItemDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"STUDY_GOOD_ITEM\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"PRODUCT_ITEM_NO\" TEXT NOT NULL UNIQUE ," + // 1: productItemNo
                "\"BOOK_NO\" TEXT," + // 2: bookNo
                "\"NAME\" TEXT," + // 3: name
                "\"PRODUCT_ID\" TEXT);"); // 4: productId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"STUDY_GOOD_ITEM\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, StudyGoodItem entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getProductItemNo());
 
        String bookNo = entity.getBookNo();
        if (bookNo != null) {
            stmt.bindString(3, bookNo);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(4, name);
        }
 
        String productId = entity.getProductId();
        if (productId != null) {
            stmt.bindString(5, productId);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public StudyGoodItem readEntity(Cursor cursor, int offset) {
        StudyGoodItem entity = new StudyGoodItem( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // productItemNo
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // bookNo
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // name
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // productId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, StudyGoodItem entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setProductItemNo(cursor.getString(offset + 1));
        entity.setBookNo(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setProductId(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(StudyGoodItem entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(StudyGoodItem entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
