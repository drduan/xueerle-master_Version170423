package com.neusoft.sample.GreenDao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.neusoft.sample.GreenDao.XTCSJG;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "XTCSJG".
*/
public class XTCSJGDao extends AbstractDao<XTCSJG, Long> {

    public static final String TABLENAME = "XTCSJG";

    /**
     * Properties of entity XTCSJG.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Xtcsjg_id = new Property(1, Integer.class, "xtcsjg_id", false, "XTCSJG_ID");
        public final static Property Score = new Property(2, Integer.class, "score", false, "SCORE");
        public final static Property Number_error = new Property(3, Integer.class, "number_error", false, "NUMBER_ERROR");
        public final static Property Number_success = new Property(4, Integer.class, "number_success", false, "NUMBER_SUCCESS");
        public final static Property Duration = new Property(5, Integer.class, "duration", false, "DURATION");
        public final static Property Jg_datetime = new Property(6, java.util.Date.class, "jg_datetime", false, "JG_DATETIME");
        public final static Property Test_group_number = new Property(7, String.class, "test_group_number", false, "TEST_GROUP_NUMBER");
        public final static Property User_id = new Property(8, String.class, "user_id", false, "USER_ID");
        public final static Property TableName = new Property(9, String.class, "tableName", false, "TABLE_NAME");
    };


    public XTCSJGDao(DaoConfig config) {
        super(config);
    }
    
    public XTCSJGDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"XTCSJG\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"XTCSJG_ID\" INTEGER," + // 1: xtcsjg_id
                "\"SCORE\" INTEGER," + // 2: score
                "\"NUMBER_ERROR\" INTEGER," + // 3: number_error
                "\"NUMBER_SUCCESS\" INTEGER," + // 4: number_success
                "\"DURATION\" INTEGER," + // 5: duration
                "\"JG_DATETIME\" INTEGER," + // 6: jg_datetime
                "\"TEST_GROUP_NUMBER\" TEXT," + // 7: test_group_number
                "\"USER_ID\" TEXT," + // 8: user_id
                "\"TABLE_NAME\" TEXT);"); // 9: tableName
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"XTCSJG\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, XTCSJG entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer xtcsjg_id = entity.getXtcsjg_id();
        if (xtcsjg_id != null) {
            stmt.bindLong(2, xtcsjg_id);
        }
 
        Integer score = entity.getScore();
        if (score != null) {
            stmt.bindLong(3, score);
        }
 
        Integer number_error = entity.getNumber_error();
        if (number_error != null) {
            stmt.bindLong(4, number_error);
        }
 
        Integer number_success = entity.getNumber_success();
        if (number_success != null) {
            stmt.bindLong(5, number_success);
        }
 
        Integer duration = entity.getDuration();
        if (duration != null) {
            stmt.bindLong(6, duration);
        }
 
        java.util.Date jg_datetime = entity.getJg_datetime();
        if (jg_datetime != null) {
            stmt.bindLong(7, jg_datetime.getTime());
        }
 
        String test_group_number = entity.getTest_group_number();
        if (test_group_number != null) {
            stmt.bindString(8, test_group_number);
        }
 
        String user_id = entity.getUser_id();
        if (user_id != null) {
            stmt.bindString(9, user_id);
        }
 
        String tableName = entity.getTableName();
        if (tableName != null) {
            stmt.bindString(10, tableName);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public XTCSJG readEntity(Cursor cursor, int offset) {
        XTCSJG entity = new XTCSJG( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // xtcsjg_id
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // score
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // number_error
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // number_success
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // duration
            cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)), // jg_datetime
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // test_group_number
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // user_id
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // tableName
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, XTCSJG entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setXtcsjg_id(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setScore(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setNumber_error(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setNumber_success(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setDuration(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setJg_datetime(cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)));
        entity.setTest_group_number(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setUser_id(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setTableName(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(XTCSJG entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(XTCSJG entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
