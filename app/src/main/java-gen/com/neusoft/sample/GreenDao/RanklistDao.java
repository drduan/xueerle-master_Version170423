package com.neusoft.sample.GreenDao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.neusoft.sample.GreenDao.Ranklist;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "RANKLIST".
*/
public class RanklistDao extends AbstractDao<Ranklist, Long> {

    public static final String TABLENAME = "RANKLIST";

    /**
     * Properties of entity Ranklist.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Unique_id = new Property(1, String.class, "unique_id", false, "UNIQUE_ID");
        public final static Property Integral_id = new Property(2, String.class, "integral_id", false, "INTEGRAL_ID");
        public final static Property User_id = new Property(3, String.class, "user_id", false, "USER_ID");
        public final static Property Integral_number = new Property(4, Integer.class, "integral_number", false, "INTEGRAL_NUMBER");
        public final static Property Month = new Property(5, String.class, "month", false, "MONTH");
        public final static Property Text = new Property(6, String.class, "text", false, "TEXT");
        public final static Property Real_name = new Property(7, String.class, "real_name", false, "REAL_NAME");
        public final static Property Email = new Property(8, String.class, "email", false, "EMAIL");
        public final static Property Class_number = new Property(9, String.class, "class_number", false, "CLASS_NUMBER");
        public final static Property Mobile = new Property(10, String.class, "mobile", false, "MOBILE");
        public final static Property Password = new Property(11, String.class, "password", false, "PASSWORD");
        public final static Property Role = new Property(12, String.class, "role", false, "ROLE");
        public final static Property Indate = new Property(13, java.util.Date.class, "indate", false, "INDATE");
        public final static Property User_icon_url = new Property(14, String.class, "user_icon_url", false, "USER_ICON_URL");
        public final static Property Gender = new Property(15, String.class, "gender", false, "GENDER");
        public final static Property Qq_number = new Property(16, String.class, "qq_number", false, "QQ_NUMBER");
        public final static Property Weixin_number = new Property(17, String.class, "weixin_number", false, "WEIXIN_NUMBER");
        public final static Property Motto = new Property(18, String.class, "motto", false, "MOTTO");
        public final static Property Recipient = new Property(19, String.class, "recipient", false, "RECIPIENT");
        public final static Property Address = new Property(20, String.class, "address", false, "ADDRESS");
        public final static Property Phone = new Property(21, String.class, "phone", false, "PHONE");
        public final static Property SchoolName = new Property(22, String.class, "schoolName", false, "SCHOOL_NAME");
    };


    public RanklistDao(DaoConfig config) {
        super(config);
    }
    
    public RanklistDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"RANKLIST\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"UNIQUE_ID\" TEXT," + // 1: unique_id
                "\"INTEGRAL_ID\" TEXT UNIQUE ," + // 2: integral_id
                "\"USER_ID\" TEXT," + // 3: user_id
                "\"INTEGRAL_NUMBER\" INTEGER," + // 4: integral_number
                "\"MONTH\" TEXT," + // 5: month
                "\"TEXT\" TEXT," + // 6: text
                "\"REAL_NAME\" TEXT," + // 7: real_name
                "\"EMAIL\" TEXT," + // 8: email
                "\"CLASS_NUMBER\" TEXT," + // 9: class_number
                "\"MOBILE\" TEXT," + // 10: mobile
                "\"PASSWORD\" TEXT," + // 11: password
                "\"ROLE\" TEXT," + // 12: role
                "\"INDATE\" INTEGER," + // 13: indate
                "\"USER_ICON_URL\" TEXT," + // 14: user_icon_url
                "\"GENDER\" TEXT," + // 15: gender
                "\"QQ_NUMBER\" TEXT," + // 16: qq_number
                "\"WEIXIN_NUMBER\" TEXT," + // 17: weixin_number
                "\"MOTTO\" TEXT," + // 18: motto
                "\"RECIPIENT\" TEXT," + // 19: recipient
                "\"ADDRESS\" TEXT," + // 20: address
                "\"PHONE\" TEXT," + // 21: phone
                "\"SCHOOL_NAME\" TEXT);"); // 22: schoolName
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"RANKLIST\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Ranklist entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String unique_id = entity.getUnique_id();
        if (unique_id != null) {
            stmt.bindString(2, unique_id);
        }
 
        String integral_id = entity.getIntegral_id();
        if (integral_id != null) {
            stmt.bindString(3, integral_id);
        }
 
        String user_id = entity.getUser_id();
        if (user_id != null) {
            stmt.bindString(4, user_id);
        }
 
        Integer integral_number = entity.getIntegral_number();
        if (integral_number != null) {
            stmt.bindLong(5, integral_number);
        }
 
        String month = entity.getMonth();
        if (month != null) {
            stmt.bindString(6, month);
        }
 
        String text = entity.getText();
        if (text != null) {
            stmt.bindString(7, text);
        }
 
        String real_name = entity.getReal_name();
        if (real_name != null) {
            stmt.bindString(8, real_name);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(9, email);
        }
 
        String class_number = entity.getClass_number();
        if (class_number != null) {
            stmt.bindString(10, class_number);
        }
 
        String mobile = entity.getMobile();
        if (mobile != null) {
            stmt.bindString(11, mobile);
        }
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(12, password);
        }
 
        String role = entity.getRole();
        if (role != null) {
            stmt.bindString(13, role);
        }
 
        java.util.Date indate = entity.getIndate();
        if (indate != null) {
            stmt.bindLong(14, indate.getTime());
        }
 
        String user_icon_url = entity.getUser_icon_url();
        if (user_icon_url != null) {
            stmt.bindString(15, user_icon_url);
        }
 
        String gender = entity.getGender();
        if (gender != null) {
            stmt.bindString(16, gender);
        }
 
        String qq_number = entity.getQq_number();
        if (qq_number != null) {
            stmt.bindString(17, qq_number);
        }
 
        String weixin_number = entity.getWeixin_number();
        if (weixin_number != null) {
            stmt.bindString(18, weixin_number);
        }
 
        String motto = entity.getMotto();
        if (motto != null) {
            stmt.bindString(19, motto);
        }
 
        String recipient = entity.getRecipient();
        if (recipient != null) {
            stmt.bindString(20, recipient);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(21, address);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(22, phone);
        }
 
        String schoolName = entity.getSchoolName();
        if (schoolName != null) {
            stmt.bindString(23, schoolName);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Ranklist readEntity(Cursor cursor, int offset) {
        Ranklist entity = new Ranklist( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // unique_id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // integral_id
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // user_id
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // integral_number
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // month
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // text
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // real_name
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // email
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // class_number
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // mobile
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // password
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // role
            cursor.isNull(offset + 13) ? null : new java.util.Date(cursor.getLong(offset + 13)), // indate
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // user_icon_url
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // gender
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // qq_number
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // weixin_number
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // motto
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // recipient
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // address
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // phone
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22) // schoolName
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Ranklist entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUnique_id(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setIntegral_id(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setUser_id(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setIntegral_number(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setMonth(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setText(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setReal_name(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setEmail(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setClass_number(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setMobile(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setPassword(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setRole(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setIndate(cursor.isNull(offset + 13) ? null : new java.util.Date(cursor.getLong(offset + 13)));
        entity.setUser_icon_url(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setGender(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setQq_number(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setWeixin_number(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setMotto(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setRecipient(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setAddress(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setPhone(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setSchoolName(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Ranklist entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Ranklist entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
