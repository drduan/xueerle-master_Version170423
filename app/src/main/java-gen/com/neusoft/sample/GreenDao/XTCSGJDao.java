package com.neusoft.sample.GreenDao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.neusoft.sample.GreenDao.XTCSGJ;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "XTCSGJ".
*/
public class XTCSGJDao extends AbstractDao<XTCSGJ, Long> {

    public static final String TABLENAME = "XTCSGJ";

    /**
     * Properties of entity XTCSGJ.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Test_group_number = new Property(1, String.class, "test_group_number", false, "TEST_GROUP_NUMBER");
        public final static Property User_id = new Property(2, String.class, "user_id", false, "USER_ID");
        public final static Property IsDoSubject = new Property(3, String.class, "IsDoSubject", false, "IS_DO_SUBJECT");
        public final static Property IsGJ = new Property(4, String.class, "IsGJ", false, "IS_GJ");
        public final static Property Time = new Property(5, Integer.class, "time", false, "TIME");
        public final static Property Testtime = new Property(6, java.util.Date.class, "testtime", false, "TESTTIME");
        public final static Property TableName = new Property(7, String.class, "tableName", false, "TABLE_NAME");
    };


    public XTCSGJDao(DaoConfig config) {
        super(config);
    }
    
    public XTCSGJDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"XTCSGJ\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"TEST_GROUP_NUMBER\" TEXT," + // 1: test_group_number
                "\"USER_ID\" TEXT," + // 2: user_id
                "\"IS_DO_SUBJECT\" TEXT," + // 3: IsDoSubject
                "\"IS_GJ\" TEXT," + // 4: IsGJ
                "\"TIME\" INTEGER," + // 5: time
                "\"TESTTIME\" INTEGER," + // 6: testtime
                "\"TABLE_NAME\" TEXT);"); // 7: tableName
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"XTCSGJ\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, XTCSGJ entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String test_group_number = entity.getTest_group_number();
        if (test_group_number != null) {
            stmt.bindString(2, test_group_number);
        }
 
        String user_id = entity.getUser_id();
        if (user_id != null) {
            stmt.bindString(3, user_id);
        }
 
        String IsDoSubject = entity.getIsDoSubject();
        if (IsDoSubject != null) {
            stmt.bindString(4, IsDoSubject);
        }
 
        String IsGJ = entity.getIsGJ();
        if (IsGJ != null) {
            stmt.bindString(5, IsGJ);
        }
 
        Integer time = entity.getTime();
        if (time != null) {
            stmt.bindLong(6, time);
        }
 
        java.util.Date testtime = entity.getTesttime();
        if (testtime != null) {
            stmt.bindLong(7, testtime.getTime());
        }
 
        String tableName = entity.getTableName();
        if (tableName != null) {
            stmt.bindString(8, tableName);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public XTCSGJ readEntity(Cursor cursor, int offset) {
        XTCSGJ entity = new XTCSGJ( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // test_group_number
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // user_id
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // IsDoSubject
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // IsGJ
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // time
            cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)), // testtime
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // tableName
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, XTCSGJ entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTest_group_number(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUser_id(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setIsDoSubject(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setIsGJ(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setTime(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setTesttime(cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)));
        entity.setTableName(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(XTCSGJ entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(XTCSGJ entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
