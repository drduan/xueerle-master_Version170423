package com.neusoft.sample.GreenDao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.neusoft.sample.GreenDao.StudyGoodTerm;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "STUDY_GOOD_TERM".
*/
public class StudyGoodTermDao extends AbstractDao<StudyGoodTerm, Long> {

    public static final String TABLENAME = "STUDY_GOOD_TERM";

    /**
     * Properties of entity StudyGoodTerm.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property BookNo = new Property(1, String.class, "bookNo", false, "BOOK_NO");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property Grade = new Property(3, String.class, "grade", false, "GRADE");
        public final static Property Term = new Property(4, Integer.class, "term", false, "TERM");
        public final static Property Type = new Property(5, Integer.class, "type", false, "TYPE");
        public final static Property HasIntroducePDF = new Property(6, Boolean.class, "hasIntroducePDF", false, "HAS_INTRODUCE_PDF");
        public final static Property ChapterNum = new Property(7, Integer.class, "chapterNum", false, "CHAPTER_NUM");
        public final static Property Version = new Property(8, String.class, "version", false, "VERSION");
        public final static Property HasCoverPIC = new Property(9, Integer.class, "hasCoverPIC", false, "HAS_COVER_PIC");
        public final static Property UpdateTime = new Property(10, java.util.Date.class, "updateTime", false, "UPDATE_TIME");
    };


    public StudyGoodTermDao(DaoConfig config) {
        super(config);
    }
    
    public StudyGoodTermDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"STUDY_GOOD_TERM\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"BOOK_NO\" TEXT NOT NULL UNIQUE ," + // 1: bookNo
                "\"NAME\" TEXT," + // 2: name
                "\"GRADE\" TEXT," + // 3: grade
                "\"TERM\" INTEGER," + // 4: term
                "\"TYPE\" INTEGER," + // 5: type
                "\"HAS_INTRODUCE_PDF\" INTEGER," + // 6: hasIntroducePDF
                "\"CHAPTER_NUM\" INTEGER," + // 7: chapterNum
                "\"VERSION\" TEXT," + // 8: version
                "\"HAS_COVER_PIC\" INTEGER," + // 9: hasCoverPIC
                "\"UPDATE_TIME\" INTEGER);"); // 10: updateTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"STUDY_GOOD_TERM\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, StudyGoodTerm entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getBookNo());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String grade = entity.getGrade();
        if (grade != null) {
            stmt.bindString(4, grade);
        }
 
        Integer term = entity.getTerm();
        if (term != null) {
            stmt.bindLong(5, term);
        }
 
        Integer type = entity.getType();
        if (type != null) {
            stmt.bindLong(6, type);
        }
 
        Boolean hasIntroducePDF = entity.getHasIntroducePDF();
        if (hasIntroducePDF != null) {
            stmt.bindLong(7, hasIntroducePDF ? 1L: 0L);
        }
 
        Integer chapterNum = entity.getChapterNum();
        if (chapterNum != null) {
            stmt.bindLong(8, chapterNum);
        }
 
        String version = entity.getVersion();
        if (version != null) {
            stmt.bindString(9, version);
        }
 
        Integer hasCoverPIC = entity.getHasCoverPIC();
        if (hasCoverPIC != null) {
            stmt.bindLong(10, hasCoverPIC);
        }
 
        java.util.Date updateTime = entity.getUpdateTime();
        if (updateTime != null) {
            stmt.bindLong(11, updateTime.getTime());
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public StudyGoodTerm readEntity(Cursor cursor, int offset) {
        StudyGoodTerm entity = new StudyGoodTerm( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // bookNo
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // grade
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // term
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // type
            cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0, // hasIntroducePDF
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // chapterNum
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // version
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // hasCoverPIC
            cursor.isNull(offset + 10) ? null : new java.util.Date(cursor.getLong(offset + 10)) // updateTime
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, StudyGoodTerm entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setBookNo(cursor.getString(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setGrade(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTerm(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setType(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setHasIntroducePDF(cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0);
        entity.setChapterNum(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setVersion(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setHasCoverPIC(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setUpdateTime(cursor.isNull(offset + 10) ? null : new java.util.Date(cursor.getLong(offset + 10)));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(StudyGoodTerm entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(StudyGoodTerm entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
