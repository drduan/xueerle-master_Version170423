package com.neusoft.sample.GreenDao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.neusoft.sample.GreenDao.StudyGoodInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "STUDY_GOOD_INFO".
*/
public class StudyGoodInfoDao extends AbstractDao<StudyGoodInfo, Long> {

    public static final String TABLENAME = "STUDY_GOOD_INFO";

    /**
     * Properties of entity StudyGoodInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ProductNo = new Property(1, String.class, "productNo", false, "PRODUCT_NO");
        public final static Property BookGroupNo = new Property(2, String.class, "bookGroupNo", false, "BOOK_GROUP_NO");
        public final static Property Introduce = new Property(3, String.class, "introduce", false, "INTRODUCE");
        public final static Property Price = new Property(4, String.class, "price", false, "PRICE");
        public final static Property Overdue = new Property(5, String.class, "overdue", false, "OVERDUE");
        public final static Property PriceOnSale = new Property(6, String.class, "priceOnSale", false, "PRICE_ON_SALE");
        public final static Property DueDate = new Property(7, String.class, "dueDate", false, "DUE_DATE");
    };


    public StudyGoodInfoDao(DaoConfig config) {
        super(config);
    }
    
    public StudyGoodInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"STUDY_GOOD_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"PRODUCT_NO\" TEXT NOT NULL UNIQUE ," + // 1: productNo
                "\"BOOK_GROUP_NO\" TEXT," + // 2: bookGroupNo
                "\"INTRODUCE\" TEXT," + // 3: introduce
                "\"PRICE\" TEXT," + // 4: price
                "\"OVERDUE\" TEXT," + // 5: overdue
                "\"PRICE_ON_SALE\" TEXT," + // 6: priceOnSale
                "\"DUE_DATE\" TEXT);"); // 7: dueDate
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"STUDY_GOOD_INFO\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, StudyGoodInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getProductNo());
 
        String bookGroupNo = entity.getBookGroupNo();
        if (bookGroupNo != null) {
            stmt.bindString(3, bookGroupNo);
        }
 
        String introduce = entity.getIntroduce();
        if (introduce != null) {
            stmt.bindString(4, introduce);
        }
 
        String price = entity.getPrice();
        if (price != null) {
            stmt.bindString(5, price);
        }
 
        //String overdue = entity.getOverdue();
//        if (overdue != null) {
//            stmt.bindString(6, overdue);
//        }
 
        String priceOnSale = entity.getPriceOnSale();
        if (priceOnSale != null) {
            stmt.bindString(7, priceOnSale);
        }
 
        String dueDate = entity.getDueDate();
        if (dueDate != null) {
            stmt.bindString(8, dueDate);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public StudyGoodInfo readEntity(Cursor cursor, int offset) {
        StudyGoodInfo entity = new StudyGoodInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // productNo
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // bookGroupNo
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // introduce
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // price
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // overdue
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // priceOnSale
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // dueDate
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, StudyGoodInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setProductNo(cursor.getString(offset + 1));
        entity.setBookGroupNo(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setIntroduce(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPrice(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setOverdue(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setPriceOnSale(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setDueDate(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(StudyGoodInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(StudyGoodInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
