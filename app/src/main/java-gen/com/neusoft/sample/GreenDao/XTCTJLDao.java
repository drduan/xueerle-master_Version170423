package com.neusoft.sample.GreenDao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.neusoft.sample.GreenDao.XTCTJL;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "XTCTJL".
*/
public class XTCTJLDao extends AbstractDao<XTCTJL, Long> {

    public static final String TABLENAME = "XTCTJL";

    /**
     * Properties of entity XTCTJL.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Xtcsjl_id = new Property(1, Integer.class, "xtcsjl_id", false, "XTCSJL_ID");
        public final static Property Answer = new Property(2, String.class, "answer", false, "ANSWER");
        public final static Property Jl_datetime = new Property(3, java.util.Date.class, "jl_datetime", false, "JL_DATETIME");
        public final static Property Xtdctm_id = new Property(4, String.class, "xtdctm_id", false, "XTDCTM_ID");
        public final static Property TableName = new Property(5, String.class, "tableName", false, "TABLE_NAME");
    };


    public XTCTJLDao(DaoConfig config) {
        super(config);
    }
    
    public XTCTJLDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"XTCTJL\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"XTCSJL_ID\" INTEGER," + // 1: xtcsjl_id
                "\"ANSWER\" TEXT," + // 2: answer
                "\"JL_DATETIME\" INTEGER," + // 3: jl_datetime
                "\"XTDCTM_ID\" TEXT," + // 4: xtdctm_id
                "\"TABLE_NAME\" TEXT);"); // 5: tableName
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"XTCTJL\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, XTCTJL entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer xtcsjl_id = entity.getXtcsjl_id();
        if (xtcsjl_id != null) {
            stmt.bindLong(2, xtcsjl_id);
        }
 
        String answer = entity.getAnswer();
        if (answer != null) {
            stmt.bindString(3, answer);
        }
 
        java.util.Date jl_datetime = entity.getJl_datetime();
        if (jl_datetime != null) {
            stmt.bindLong(4, jl_datetime.getTime());
        }
 
        String xtdctm_id = entity.getXtdctm_id();
        if (xtdctm_id != null) {
            stmt.bindString(5, xtdctm_id);
        }
 
        String tableName = entity.getTableName();
        if (tableName != null) {
            stmt.bindString(6, tableName);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public XTCTJL readEntity(Cursor cursor, int offset) {
        XTCTJL entity = new XTCTJL( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // xtcsjl_id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // answer
            cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)), // jl_datetime
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // xtdctm_id
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // tableName
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, XTCTJL entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setXtcsjl_id(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setAnswer(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setJl_datetime(cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)));
        entity.setXtdctm_id(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setTableName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(XTCTJL entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(XTCTJL entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
